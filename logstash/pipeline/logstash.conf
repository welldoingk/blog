input {
  # Filebeat에서 들어오는 애플리케이션 로그
  beats {
    port => 5044
  }
  
  # PostgreSQL posts 테이블 데이터
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.6.0.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}"
    jdbc_user => "${DB_USER}"
    jdbc_password => "${DB_PASSWORD}"
    
    tracking_column => "modified_at"
    tracking_column_type => "timestamp"
    use_column_value => true
    
    schedule => "*/30 * * * * *"
    
    statement => "
      SELECT 
        p.id::text as id,
        p.board_id,
        p.title,
        p.content,
        p.view_count,
        p.created_at,
        p.modified_at,
        p.del_yn
      FROM posts p
      WHERE p.modified_at > :sql_last_value 
      AND p.del_yn != 'Y'
      ORDER BY p.modified_at ASC
    "
    type => "db_sync"
  }
}

filter {
  if [type] == "db_sync" {
    # PostgreSQL 데이터 처리
    mutate {
      copy => { "id" => "[@metadata][_id]"}
      remove_field => ["@version", "@timestamp"]
    }
    
    date {
      match => ["created_at", "ISO8601"]
      target => "created_at"
    }
    date {
      match => ["modified_at", "ISO8601"]
      target => "modified_at"
    }
  } else {
    # 애플리케이션 로그 처리
    if [message] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{NOTSPACE:thread}\] %{LOGLEVEL:log_level} %{NOTSPACE:logger_name} - %{GREEDYDATA:message}" }
        overwrite => [ "message" ]
      }
      
      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        target => "@timestamp"
      }
      
      if [log_level] == "ERROR" {
        mutate {
          add_tag => ["error"]
        }
      }
      if [log_level] == "DEBUG" {
        mutate {
          add_tag => ["debug"]
        }
      }
    }
  }
}

output {
  if [type] == "db_sync" {
    # PostgreSQL 데이터를 posts 인덱스로 저장
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "posts"
      document_id => "%{[@metadata][_id]}"
      doc_as_upsert => true
    }
  } else {
    # SQL 로그를 위한 조건부 출력
    if [logger_name] =~ "SQL" {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "sql-logs-%{+YYYY.MM.dd}"
      }
    }
    # 그 외 일반 로그
    else {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "spring-logs-%{+YYYY.MM.dd}"
      }
    }
  }
  
  # 디버깅용 콘솔 출력
  stdout { codec => rubydebug }
}